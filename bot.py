import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, Message
from dotenv import load_dotenv
from os import getenv
from data import load_data, save_data, game_data1

load_dotenv()
bot = telebot.TeleBot(getenv('TOKEN'))
user_data = load_data()
game_data = game_data1()


@bot.message_handler(commands=['help'])
def message_help(message):
    user_id = message.from_user.id
    bot.send_message(
        chat_id=user_id,
        text="–≠—Ç–æ –ø–æ–º–æ—â—å —Å –±–æ—Ç–æ–º!\n"
             "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - /start\n"
             "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é - /about\n"
             "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö - /help")


@bot.message_handler(commands=['about'])
def message_about(message):
    user_id = message.from_user.id
    bot.send_message(
        chat_id=user_id,
        text='–≠—Ç–æ—Ç –±–æ—Ç-–∫–≤–µ—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω @ziinnger –∏ —Å–æ–∞–≤—Ç–æ—Ä–æ–º, —á–µ–ª–æ–≤–µ–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è –≤—ã—Ä—É—á–∏–ª, –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π @linamistq')
    bot.send_sticker(
        chat_id=user_id,
        sticker="CAACAgIAAxkBAAELFV9llU7QjE3AIpuaSSu8PX5y6grW4AACMQMAAm2wQgOanBOYGq4GgDQE"
    )


@bot.message_handler(commands=['start'])
def message_start(message):
    user_id = message.from_user.id
    markup = ReplyKeyboardMarkup()

    if str(user_id) not in user_data:
        markup.add(KeyboardButton("–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µüöÄ"))

        user_data[str(user_id)] = {
            "user_name": message.from_user.username,
            "location": "start"
        }

        save_data(user_data)
    elif str(user_id) in user_data:
        markup.add(KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åü™ê"), KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æüõ∏"))

    text = ("<b>{}</b>!üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 3072 –≥–æ–¥! –ù–∞ –ó–µ–º–ª–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–∞—Å—Ç—ã–µ –º–∞—Å—Å–æ–≤—ã–µ "
            "—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã, –ø–æ—ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –±—ã–ª–æ –≤—ã–Ω—É–∂–¥–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –≤ –∫–æ—Å–º–æ—Å "
            "–¥–ª—è –ø–æ–∏—Å–∫–æ–≤ –ø–ª–∞–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è –∂–∏–∑–Ω–∏.\n\n"
            "–í—ã ‚Äî —É–ø–æ—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –æ—á–µ—Ä–µ–¥–Ω—É—é —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ "
            "—á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ.\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –í–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Ç–∞–π–Ω—ã –∏ –±—É–¥—É—â–µ–µ –æ–±—â–µ—Å—Ç–≤–∞. "
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å, –∏ –ø–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.</i>")

    with open(r'C:\Users\–Æ–ª—è\PycharmProject\pythonProject_bot\media\1.jpg', 'rb') as f:
        bot.send_photo(
            message.chat.id,
            f,
            caption=text.format(message.from_user.username),
            reply_markup=markup,
            parse_mode='html'
        )


def create_markup(user_data, user_id, game_data):
    markup = ReplyKeyboardMarkup()
    key = user_data[str(user_id)]['location']
    if key and key in game_data and 'options' in game_data[key].keys():
        for option in game_data[key]['options'].keys():
            markup.add(option)
    else:
        markup.add("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æüõ∏")
    return markup


def filter_continues(message: Message):
    keywords = ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åü™ê", "–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µüöÄ"]
    return message.text in keywords


@bot.message_handler(func=filter_continues)
def continue_restart(message: Message):
    user_id = message.from_user.id
    send_question(user_id)


def filter_restart(message: Message):
    keywords = ["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æüõ∏"]
    return message.text in keywords


@bot.message_handler(func=filter_restart)
def restart_solution(message: Message):
    user_id = message.from_user.id
    user_data[str(user_id)]['location'] = 'start'
    save_data(user_data)
    send_question(user_id)


def send_question(user_id):
    key = user_data[str(user_id)]['location']
    description = game_data[key]['description']
    photo = game_data[key]['media']
    markup = create_markup(user_data, user_id, game_data)
    if key != "planet_v" and key != "planet":
        with open(photo, 'rb') as f:
            bot.send_photo(
                chat_id=user_id,
                photo=f,
                caption=f'{description}\n\n'
                        f'<i>–ö–∞–∂–¥–æ–µ –í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.\n'
                        f'–í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ...</i>',
                reply_markup=markup,
                parse_mode='html'
            )
    elif key == "planet_v":

        with open(photo, 'rb') as f:
            bot.send_photo(
                chat_id=user_id,
                photo=f,
                caption=f"{description}\n"
                        f"–¢–µ–ø–µ—Ä—å –ø–ª–∞–Ω–µ—Ç–∞ –Ω–æ—Å–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ <b>{user_data[str(user_id)]['user_name']}</b>!",
                reply_markup=markup,
                parse_mode='html'
            )
    else:
        with open(photo, 'rb') as f:
            bot.send_photo(
                chat_id=user_id,
                photo=f,
                caption=description,
                reply_markup=markup,
                parse_mode='html'
            )


@bot.message_handler(func=lambda message: True)
def handle_answer(message):
    user_id = message.chat.id

    if str(user_id) not in user_data:
        return message_start(message)

    user_answer = message.text
    key = user_data[str(user_id)]['location']

    if user_answer not in game_data[key]['options'].keys():
        bot.send_message(
            user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    change_scales(str(user_id), user_answer)
    send_question(str(user_id))


def change_scales(user_id: str, user_answer: str):
    key = user_data[str(user_id)]['location']
    location = game_data[key]['options'][user_answer]
    user_data[str(user_id)]['location'] = location
    save_data(user_data)


bot.polling(none_stop=True)